		     +--------------------------+
                     | CS 140	                |
		     | PROJECT 2: USER PROGRAMS	|
		     | DESIGN DOCUMENT        	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Huang Song <huangs@stanford.edu>
Kai Zang <kaizang@stanford.edu>
Xin Lei <leixin@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

Huang Song: 
	implemented argument passing in process.c; 
	implemented safe memory access in syscall.c; 
	implemented part of syscall.c: halt(); exit(); create(); remove(); 
				 	write();  


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We don't declare any new struct or struct member. But we use malloc() to initia-
lize a string 'my_fn_copy' and free memory before process_execute() returns.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

1) We parse the command using ' ', and saves the pointer position in file_name_
in an array offset_argv[64]. Following section pdf sequence, we first word align
, then push token, then set argv[argc] to 0, then push address of each token,
push argv, push argc, and finally fake return address.

2) when we push in token address which has been saved in offset_argv[], we push
in the reverse order.

3) Honestly, we don't take care in avoiding stack page overflow. Our idea about
it is to check the avaliable space in stack as compared with argument to be 
pushed in. Or we can push an integer first and make sure it does not overflow,
then we push in real argv.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() maintain an internal state between calls, it uses a static variable to
save the state. So that if two threads try to call strtok(), they will have
race condition.

On the contrary, strtok_r() uses another variable to store the state which is 
not static and belong to the current calling thread. In this way, strtok_r() 
avoids race conditions.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

In Unix-like system, the shell takes work for kernel which means the operation
needed by kernel reduces and thus simplifies kernel operations. And this frees
kernel more options to include other functions.

Besides, shell protects kernel in that it filters some potential commands that
may make kernel go wrong.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

added in thread.h

    struct lock l;			/* For synchronization between parent and 						child */
    struct condition c;                
    struct sema sema_load;		/* semaphore to synchronize load */ 
    struct thread *parent;             /* The parent of this thread */
    struct list children;		/* A list for all children */

/* struct child is the node for children list */
struct child {
    struct list_elem childelem;
    int pid;
    struct thread *t;
    bool loadSuccess; /* indicate loading success */
    bool hasWaited;   /* flag if this child process has been waited by parent */
    bool hasExit; 
    bool isKilled;    /* child process is alive or not */
    bool isWaiting;
    int exit_status;  /* return status */
};


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

struct openFile {
	tid_t f_tid;	//the thread who owns the file
	int fd;		//file's fd
	struct list_elem elem;	//to be linked in open_file_list
	struct file *file;	//the open file
};

We maintain a list 'open_file_list' in the entire OS. Everytime the current 
process or other process want to open this file, we will add the node 'openFile'
as shown above. So the same file opened by different process or the same process
many times will be DIFFERENT fid (file descriptors).

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
reading:
acquire lock;
check fd to see where is it reading from;
if fd==STDIN_FILENO, use input_getc,
if fd==STDOUT_FILENO, fail reading,
else if mem access is save, file_read(),
else exit(-1)
release lock;

writing:
acquire lock;
check fd to see where is it reading from;
if fd==STDIN_FILENO, fail writing,
if fd==STDOUT_FILENO, use put_buf(),
else if mem access is save, file_write(),
else exit(-1)
release lock;


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The greatest possible number of inspections will be 4096 (byte by byte), while 
the smallest number of inspections will be 1. If only copies 2 bytes of data,
it will be either 1 or 2. 

Yes, we can inspect different pages at the same time.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When a "wait" system call is called:

1) parent searches 'children' list to see if there is any child in the list and 
matches 'pid' info. It there is, parent get information from node 'child'.

2) check node 'Child' hasWaited flag. If the parent has already waited for this
child, return -1. Otherwise, label hasWaited flag.

3) Check if the child is alive by 'isKilled' flag through the node 'child' in 
'children' list maintained by parent.Note that even if the child dies, this list
still exists.

4) put the parent to wait, release the lock to children.

5) When children finish, release the lock to parent to ensure synchronization.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We try to avoid the error by making sure the pointer has been validated by the 
user, and then dereference. We plan to do it by ensuring the pointer is in user 
space below PHYS_BASE, and using pagedir_get_page(). For buffers, we plan to 
make sure the entire buffer can be accessed safely. 

To ensure all temporarily allocated resources are freed, before process_exit(),
we free all resources that we created using malloc(), like 'children' list in
each thread. 

In our program, whenever pointer validation has been failed, the process will 
directly go to process_exit(). Inform current process' parents that is is dead,
and inform its children that their parent point has been set to NULL (their 
parent is dead) and free all resources which are created by malloc().


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We plan to use a condition variable or semaphore on it. So that when process 
begins to load, it uses sema_down() and after loading it sema_up() to make sure
it will return after new executable loads.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

There will be a lock between P and C. When P waits, C acquires the lock, so P 
cannot acquire lock before C exist. After C exits, C will release the lock. And
in our codes, P will go through 'children' list to make sure that children has 
really exited.

When a process is finished, we will call process_exit() to release all resources
including locks, condition variables and resources by malloc().

The wait is called from parents, so if parent has been dead, there is no one 
requiring the lock.



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

The strategy we adopted to use includes check virtual address pointer is NULL.
If it is NULL, the process will be terminated. Then check if virtual address is 
smaller than PHYS_BASE. After that, following section slides, to use pagedir_get
_page() to ensure that the pointer has been mapped.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We use the same list to maintain file descriptors by all processes. So the main
advantage is that it ensures dynamic memory allocation and do not have limit on
how many files to be opened.

The disadvantage is that when this list grows large, search efficiency is low.
For further improvement we plan to sort them in order and add another item of 
calling process (pid) in the node to enhance search efficiency.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

If we changed to different mapping, then one process (one pid) can correspond to
different threads (different tids).

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
